#!/usr/bin/env php
<?php

declare(strict_types=1);

use Symfony\Component\Filesystem\Path;
use Vstelmakh\Stasis\Generator\ConfigInterface;
use Vstelmakh\Stasis\Generator\SiteGenerator;
use Vstelmakh\Stasis\Router\Compiler\RouteCompiler;
use Vstelmakh\Stasis\ServiceLocator\ServiceLocator;

if (isset($GLOBALS['_composer_autoload_path'])) {
    $autoloadPath = $GLOBALS['_composer_autoload_path'];
} else {
    $files = [__DIR__ . '/../../autoload.php', __DIR__ . '/../vendor/autoload.php', __DIR__ . '/vendor/autoload.php'];
    foreach ($files as $file) {
        if (file_exists($file)) {
            $autoloadPath = $file;
            break;
        }
    }
}
require_once $autoloadPath;

$autoloadPath = Path::canonicalize($autoloadPath);
$projectRoot = dirname($autoloadPath, 2);

$configPath = Path::canonicalize($projectRoot . '/stasis.php');
if (!is_file($configPath)) {
    echo sprintf('Missing site config file "%s".' . PHP_EOL, $configPath);
    exit(1);
}

$config = require $configPath;
if (!$config instanceof ConfigInterface) {
    echo sprintf('Config "%s" does not implement "%s" interface.' . PHP_EOL, $configPath, ConfigInterface::class);
    exit(1);
}

$container = $config->container();
$serviceLocator = new ServiceLocator($container);

$prefix = $config->prefix();
$compiler = new RouteCompiler('/', $prefix, $serviceLocator);
$routes = $config->routes();
$compiledRoutes = $compiler->compile($routes);

$distribution = $config->distribution();
$siteGenerator = new SiteGenerator($serviceLocator, $distribution);
$siteGenerator->generate($compiledRoutes);

echo 'Complete' . PHP_EOL;
exit(0);
